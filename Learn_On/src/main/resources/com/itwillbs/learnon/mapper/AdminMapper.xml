<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.learnon.mapper.AdminMapper">

<!-- ================================================================== -->
<!-- 클래스 -->	

	<select id="getClassId" resultType="int">
		SELECT IFNULL(MAX(CLASS_ID), 0) + 1 
		FROM CLASS
	</select>

	<!--  클래스 -->
	<insert id="insertClass">
<!-- 		<selectKey keyProperty="class_id" resultType="int" order="BEFORE"> -->
<!-- 			SELECT IFNULL(MAX(CLASS_ID), 0) -->
<!-- 			FROM CLASS -->
<!-- 		</selectKey> -->
		INSERT
		INTO CLASS
		VALUES (
			#{class_id}
			, #{class_title}
			, #{mem_id}
			, #{class_intro}
			, #{class_price}
			, #{class_category}
			, DATE_FORMAT(now(), '%y-%m-%d')
			, #{class_runtime}
			, #{class_pic1}
			, #{class_contents}
			, #{class_status})
	</insert>
	
	<!-- 클래스 등록시 이미지 첨부 -->
	<update id="insertClassPic">
		<selectKey keyProperty="class_id" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(CLASS_ID), 0) + 1
			FROM CLASS
		</selectKey>
		UPDATE CLASS
		SET CLASS_PIC1 = #{class_pic1}
		WHERE  CLASS_ID = #{class_id}
	</update>
	
	<!-- 클래스 등록시 커리큘럼 입력 -->
	<insert id="insertCurriculum">
<!-- 		<selectKey keyProperty="class_id" resultType="int" order="BEFORE"> -->
<!-- 			SELECT IFNULL(MAX(CLASS_ID), 0) + 1 -->
<!-- 			FROM CLASS -->
<!-- 		</selectKey> -->
		INSERT
		INTO CURRICULUM
		VALUES (
			#{class_id}
			, NULL
			, #{cur_title}
			, NULL
			, ${cur_runtime})
	</insert>
	
	<!-- 클래스 등록시 커리큘럼 비디오 첨부 -->
	<update id="insertCurVideo">
		<selectKey keyProperty="cur_id" resultType="int" order="BEFORE">
			SELECT MAX(CUR_ID)
			FROM CURRICULUM
		</selectKey>
		UPDATE CURRICULUM
		SET CUR_VIDEO = #{cur_video}
		WHERE CUR_ID = #{cur_id}
	</update>
	
	
	<!-- 클래스 목록 조회 -->
	<select id="getClassList">
		SELECT *
		FROM CLASS
	</select>
	
	<!-- 클래스 상세정보 조회 -->
	<select id="getClass" resultType="admin">
		SELECT 
			CLA.CLASS_ID
			, CLA.CLASS_TITLE
		    , CLA.MEM_ID
		    , CLA.CLASS_INTRO
		    , CLA.CLASS_PRICE
		    , CLA.CLASS_CATEGORY 
			, CLA.CLASS_REG_DATE
		    , CLA.CLASS_RUNTIME
		    , CLA.CLASS_PIC1 
		    , CLA.CLASS_CONTENTS
		    , CLA.CLASS_STATUS
		    , COMTY.CODETYPE
		    , COMTY.CODETYPE_ID
		    , COM.CODEID
		    , COM.CODENAME
		    , COMTY.NAME 
		FROM CLASS CLA LEFT OUTER JOIN COMMONCODETYPE COMTY 
		ON CLA.CLASS_CATEGORY = COMTY.NAME 
		LEFT OUTER JOIN COMMONCODE COM
		ON COM.CODEID = COMTY.CODETYPE 
		WHERE CLA.CLASS_ID = #{class_id}
	</select>
	
	<!-- 커리큘럼 조회 -->
	<select id="getCurriculum">
		SELECT *
		FROM CURRICULUM
		WHERE CLASS_ID = #{class_id}
	</select>
	
	<update id="updateClass">
		UPDATE CLASS
		SET
			CLASS_TITLE = #{class_title}
			, MEM_ID = #{mem_id}
			, CLASS_INTRO = #{class_intro}
			, CLASS_PRICE = #{class_price}
			, CLASS_CATEGORY = #{class_category}
			, CLASS_RUNTIME = #{class_runtime}
			, CLASS_PIC1 = #{class_pic1}
			, CLASS_CONTENTS = #{class_contents}
			, CLASS_STATUS = #{class_status}
		WHERE CLASS_ID = #{class_id}
	</update>
	
	<update id="updateCurriculum">
		UPDATE CURRICULUM
		SET CUR_TITLE = #{cur_title}
			, CUR_VIDEO = #{cur_video}
		WHERE CUR_ID = #{cur_id}
	</update>
	
	<delete id="deleteClass">
		DELETE
		FROM CLASS
		WHERE CLASS_ID = #{class_id}
	</delete>
	
	<delete id="deleteCurriculum">
		DELETE
		FROM CURRICULUM
		WHERE CLASS_ID = #{class_id}
	</delete>
	
<!-- ================================================================== -->
<!-- 회원 -->	
	
	<!-- 일반회원 목록 조회 -->
	<select id="getNomalMemberList"> 
		SELECT MEM_IDX
			 , MEM_ID
			 , MEM_PASSWD
			 , MEM_NAME
			 , MEM_NICK
			 , MEM_BIRTHDAY
			 , MEM_EMAIL
			 , MEM_GENDER
			 , MEM_PHONE
			 , MEM_POST_CODE
			 , MEM_ADDRESS1
			 , MEM_ADDRESS2
			 , MEM_GRADE
			 , MEM_STATUS
			 , MEM_REG_DATE
			 , MEM_WITHDRAW_DATE
			 , MEM_LIKE1_CLASS
			 , MEM_LIKE2_CLASS
			 , FILE_PP
			 , MAIL_AUTH_STATUS
		  FROM MEMBER
		 WHERE 1=1
		   AND MEM_GRADE = 'MEM01'
		   AND MEM_STATUS IN (1, 2)
		 <if test="!searchKeyword.equals('')">
			<choose>
			<when test="searchType.equals('id')">
				AND	MEM_ID LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('name')">
				AND	MEM_NAME LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
			</choose>
		</if>
		<choose>
			<when test="sort.equals('reg_lastest')">
			 ORDER
			    BY MEM_REG_DATE DESC
			</when>
			<when test="sort.equals('reg_oldest')">
			ORDER
			    BY MEM_REG_DATE ASC
			</when>
		</choose>
		 LIMIT #{startRow}
		 	 , #{listLimit}
	</select>
	<!-- 일반회원 목록 갯수 -->
	<select id="getNomalMemberListCount" resultType="int">
		SELECT COUNT(*)
		  FROM MEMBER
		 WHERE 1=1
		   AND MEM_GRADE = 'MEM01'
		   AND MEM_STATUS IN (1, 2)
	</select>
	
	<!-- 강사회원 목록 조회 -->
	<select id="getInstructorMemberList">
		SELECT MEM_IDX
			 , MEM_ID
			 , MEM_PASSWD
			 , MEM_NAME
			 , MEM_NICK
			 , MEM_BIRTHDAY
			 , MEM_EMAIL
			 , MEM_GENDER
			 , MEM_PHONE
			 , MEM_POST_CODE
			 , MEM_ADDRESS1
			 , MEM_ADDRESS2
			 , MEM_GRADE
			 , MEM_STATUS
			 , MEM_REG_DATE
			 , MEM_WITHDRAW_DATE
			 , MEM_LIKE1_CLASS
			 , MEM_LIKE2_CLASS
			 , FILE_PP
			 , MAIL_AUTH_STATUS
		  FROM MEMBER
		 WHERE 1=1
		   AND MEM_GRADE IN ('MEM01', 'MEM02')
		   AND LENGTH(FILE_PP) >= 1
	</select>
	<!-- 탈퇴회원 목록 조회 -->
	<select id="getWithdrawMemberList">
		SELECT MEM_IDX
			 , MEM_ID
			 , MEM_PASSWD
			 , MEM_NAME
			 , MEM_NICK
			 , MEM_BIRTHDAY
			 , MEM_EMAIL
			 , MEM_GENDER
			 , MEM_PHONE
			 , MEM_POST_CODE
			 , MEM_ADDRESS1
			 , MEM_ADDRESS2
			 , MEM_GRADE
			 , MEM_STATUS
			 , MEM_REG_DATE
			 , MEM_WITHDRAW_DATE
			 , MEM_LIKE1_CLASS
			 , MEM_LIKE2_CLASS
			 , FILE_PP
			 , MAIL_AUTH_STATUS
		  FROM MEMBER
		 WHERE 1=1
		   AND MEM_STATUS = '3'
	</select>
	<!-- mem_id로 회원목록 조회 -->
	<select id="getMemberList" resultType="member">
		SELECT MEM_IDX
			 , MEM_ID
			 , MEM_PASSWD
			 , MEM_NAME
			 , MEM_NICK
			 , MEM_BIRTHDAY
			 , MEM_EMAIL
			 , MEM_GENDER
			 , MEM_PHONE
			 , MEM_POST_CODE
			 , MEM_ADDRESS1
			 , MEM_ADDRESS2
			 , MEM_GRADE
			 , MEM_STATUS
			 , MEM_REG_DATE
			 , MEM_WITHDRAW_DATE
			 , MEM_LIKE1_CLASS
			 , MEM_LIKE2_CLASS
			 , FILE_PP
			 , MAIL_AUTH_STATUS
		  FROM MEMBER
		 WHERE MEM_ID = #{mem_id}
	</select>
	
	<!-- 회원 상태 변경 -->
	<update id="changeMemStatus">
		UPDATE MEMBER
		   SET MEM_STATUS = #{mem_status}
		<choose>
			<when test="mem_status == 3">
			  , MEM_WITHDRAW_DATE = NOW()
			</when>
			<otherwise>
			  , MEM_WITHDRAW_DATE = NULL
			</otherwise>
		</choose>
		WHERE MEM_ID = #{mem_id}
	</update>
	
	<!-- 회원 삭제 -->
	<delete id="deleteMember">
		DELETE
		  FROM MEMBER
		 WHERE MEM_ID = #{mem_id}
	</delete>
	
	<!-- 회원 등급 변경 -->
	<update id="updateGrade">
		UPDATE MEMBER
		<choose>
			<when test="mem_grade.equals('MEM01')">
			SET MEM_GRADE = 'MEM02'
			</when>
			<when test="mem_grade.equals('MEM02')">
			SET MEM_GRADE = 'MEM01'
			</when>
		</choose>
		WHERE MEM_ID = #{mem_id}
	</update>
	<!-- 쿠폰 발급 -->
	<insert id="insertCoupon">
		INSERT
		  INTO MYCOUPON(
		  	   MEM_ID
		  	 , COUPON_ID
		  	 , ISSUE_DATE
		  	 , COUPON_STATUS
		  	 , COUPON_ISUSED
		)
		VALUES (
			   #{mem_id}
			 , #{coupon_id}
			 , NOW()
			 , 1
			 , 1
		)
	</insert>
	
	<!-- 쿠폰 발급용 멤버 리스트 조회 -->
	<select id="selectCouponMember" resultType="member">
		SELECT m.MEM_ID
			 , m.MEM_NAME
		  FROM MEMBER m
		  LEFT
		  JOIN MYCOUPON c
		    ON m.MEM_ID = c.MEM_ID
		   AND c.COUPON_ID = #{coupon_id}
		 WHERE c.MEM_ID IS NULL
	</select>
<!-- ================================================================== -->
<!-- 카테고리 -->	

	<!-- 소분류 셀렉트 -->
	<select id="selectSubCate" resultType="map">
		SELECT C.CODEID AS CODEID_MAINCATE
		     , C.CODENAME AS CODENAME_MAINCATE
		     , T.CODETYPE_ID AS CODETYPE_ID_SUBCATE
		     , T.NAME AS NAME_SUBCATE
		     , CASE WHEN T.NAME = (SELECT CLASS_CATEGORY
								   FROM CLASS
								   WHERE CLASS_ID = #{class_id}) THEN 'selected'
																 ELSE '' 		END AS SELECTED
		  FROM COMMONCODE C
		  JOIN COMMONCODETYPE T
			ON C.CODEID = T.CODETYPE
		 WHERE 1 = 1
		   AND C.CODEID = #{codeid_maincate}
	</select>
	
	<!-- 대분류 조회 -->
	<select id="getMainCate" resultType="map">
		SELECT *
		FROM COMMONCODE
	</select>
	
	<!-- 소분류 조회 -->
	<select id="getSubCate" resultType="map">
		SELECT *
		FROM COMMONCODETYPE
	</select>
	
	<!-- 대분류 인서트 -->
	<insert id="insertMainCate">
		INSERT
		INTO COMMONCODE
		VALUES (
			#{codeid_maincate}
			, #{codetype_maincate}
			, #{codename_maincate}
			, #{description_maincate})
	</insert>
	
	<!-- 소분류 인서트 -->
	<insert id="insertSubCate">
		INSERT
		INTO COMMONCODETYPE
		VALUES (
			#{codetype_subcate}
			, #{codetype_id_subcate}
			, #{name_subcate}
			, #{description_subcate}
			, #{order_subcate})
	</insert>
	
	<!-- 대분류 삭제 -->
	<delete id="deleteMainCate">
		DELETE
		FROM COMMONCODE
		WHERE CODEID = #{codeid}
	</delete>
	
	<!-- 소분류 삭제 -->
	<delete id="deleteSubCate">
		DELETE
		FROM COMMONCODETYPE
		WHERE CODETYPE_ID = #{old_codetype_subcate}
	</delete>
	
	<!-- 대분류 수정 -->
	<update id="updateMainCate">
		UPDATE COMMONCODE
		SET
			CODETYPE = #{old_codetype_maincate}
			, CODEID = #{old_codeid_maincate}
			, CODENAME = #{old_codename_maincate}
			, DESCRIPTION = #{old_description_maincate}
		WHERE CODEID = #{main_checkCodeid}
	</update>
	
	<!-- 소분류 수정 -->
	<update id="updateSubCate">
		UPDATE COMMONCODETYPE
		SET
			CODETYPE = #{old_codetype_subcate}
			, CODETYPE_ID = #{old_codetype_id_subcate}
			, NAME = #{old_name_subcate}
			, DESCRIPTION = #{old_description_subcate}
			, `ORDER` = #{old_order_subcate}
		WHERE CODETYPE_ID = #{sub_checkCodeid}
	</update>
	
	
	<!-- // 강의 문의 게시판 목록 조회 -->
	<select id="selectCourseSupportList" resultType="cSupport">
		SELECT C_SUPPORT_IDX
			   , C_SUPPORT_DATE
			   , C_SUPPORT_CATEGORY
			   , MEM_ID
			   , C_SUPPORT_SUBJECT
			   , C_SUPPORT_CONTENT
			   , C_SUPPORT_ANSWER_DATE
			   , C_SUPPORT_ANSWER_SUBJECT
			   , C_SUPPORT_ANSWER_CONTENT
			   , C_SUPPORT_FILE
			   , C_CLASS_ID
		FROM CLASS_SUPPORT
		ORDER BY
		 	C_SUPPORT_IDX DESC
		 LIMIT
		 	#{startRow}
		 	, #{listLimit}
	</select>
	<update id="updateCourseSupport">
		-- 관리자 수강 문의 답변 작성 및 수정
		UPDATE CLASS_SUPPORT
		   SET C_SUPPORT_ANSWER_DATE = NOW()
			   , C_SUPPORT_ANSWER_SUBJECT = #{c_support_answer_subject}
		       , C_SUPPORT_ANSWER_CONTENT = #{c_support_answer_content}
		  WHERE C_SUPPORT_IDX = #{c_support_idx}
	</update>

</mapper>
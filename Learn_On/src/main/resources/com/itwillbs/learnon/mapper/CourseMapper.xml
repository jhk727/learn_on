<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.learnon.mapper.CourseMapper">
	<select id="selectCourseList" resultType="course">
		SELECT C.CLASS_TITLE 
		     , M.MEM_NAME AS MEM_ID 
		     , C.CLASS_INTRO
		     , C.CLASS_PRICE
		     , C.CLASS_CATEGORY
		     , C.CLASS_REG_DATE
		     , C.CLASS_RUNTIME
		     , C.CLASS_PIC1
		     , C.CLASS_CONTENTS
			 , C.CLASS_STATUS
			 , C.CLASS_ID
			 , T.NAME
			 , T.CODETYPE
			 , T.DESCRIPTION
			 , (SELECT CODENAME FROM COMMONCODE WHERE CODEID = #{codetype}) as CATENAME
			 , T.CODETYPE_ID
			 , R.REVIEW_SCORE
			 , C.MEM_ID AS TEACHER_ID
		  FROM CLASS C
	LEFT  JOIN MEMBER M ON C.MEM_ID = M.MEM_ID
		  JOIN COMMONCODETYPE T ON C.CLASS_CATEGORY = T.NAME
 	 LEFT JOIN (SELECT TRUNCATE(AVG(REVIEW_SCORE), 1) AS REVIEW_SCORE, CLASS_ID FROM REVIEW GROUP BY CLASS_ID) R ON R.CLASS_ID  = C.CLASS_ID
		 WHERE 1 = 1
		  AND T.CODETYPE = #{codetype}
  		 <if test="course.CODETYPE_ID != null"> 
		  AND T.CODETYPE_ID = #{course.codetype_id}
		 </if>
		 <choose>
		 	<when test="searchType.equals('new')">
		 	 ORDER BY CLASS_ID DESC
		 	</when>
		 	<when test="searchType.equals('title')">
		 	 ORDER BY CLASS_TITLE ASC
		 	</when>
		 	<when test="searchType.equals('price')">
		 	 ORDER BY CLASS_PRICE ASC
		 	</when>
		 	<when test="searchType.equals('score')">
		 	 ORDER BY REVIEW_SCORE DESC
		 	</when>
		 </choose>
	</select>
	<select id="selectFindCourseList" resultType="course">
		SELECT C.CLASS_TITLE 
		     , M.MEM_NAME AS MEM_ID 
		     , C.CLASS_INTRO
		     , C.CLASS_PRICE
		     , C.CLASS_CATEGORY
		     , C.CLASS_REG_DATE
		     , C.CLASS_RUNTIME
		     , C.CLASS_PIC1
		     , C.CLASS_CONTENTS
			 , C.CLASS_STATUS
			 , C.CLASS_ID
			 , R.REVIEW_SCORE
			 , C.MEM_ID AS TEACHER_ID
		  FROM CLASS C
	LEFT  JOIN MEMBER M ON C.MEM_ID = M.MEM_ID
		  JOIN COMMONCODETYPE T ON C.CLASS_CATEGORY = T.NAME
 	 LEFT JOIN (SELECT TRUNCATE(AVG(REVIEW_SCORE), 1) AS REVIEW_SCORE, CLASS_ID FROM REVIEW GROUP BY CLASS_ID) R ON R.CLASS_ID  = C.CLASS_ID
	     WHERE C.CLASS_TITLE LIKE CONCAT('%', #{find_title}, '%')
	</select>
	
	
	<select id="selectCommonCodeType" resultType="codeType" parameterType="string">
		SELECT 
			   CC.CODEID AS CODETYPE
			 , CC.CODENAME 
			 , CT.CODETYPE_ID
			 , CT.NAME
		  FROM COMMONCODETYPE CT
		  JOIN COMMONCODE CC ON CC.CODEID = CT.CODETYPE
		 WHERE CC.CODEID = #{codetype}
	</select>
	
	<select id="selectCommonCodeTypeAll" resultType="codeType">
		SELECT CT.CODETYPE
			 , CT.NAME
			 , CT.DESCRIPTION
			 , CT.CODETYPE_ID
			 , CC.CODENAME
			 , CC.CODETYPE AS CC_CODETYPE
		  FROM COMMONCODETYPE CT
		  JOIN COMMONCODE CC ON CC.CODEID = CT.CODETYPE
		 WHERE CT.CODETYPE LIKE 'CATE%'
		 ORDER BY CT.CODETYPE, CT.ORDER
	</select>
	
	<select id="selectCommonCode" resultType="codeType">
		SELECT 
			   CT.CODETYPE
			 , CC.CODENAME
		  FROM COMMONCODETYPE CT
		  JOIN COMMONCODE CC
			ON CT.CODETYPE = CC.CODEID
		 WHERE CT.CODETYPE LIKE 'CATE%'
		 GROUP BY CODETYPE , CC.CODENAME;
	</select>
	
	<select id="selectCourse" resultType="course" parameterType="int">
		 SELECT 
			     C.CLASS_TITLE
			   , M.MEM_NAME		AS MEM_ID
			   , C.CLASS_INTRO
			   , C.CLASS_PRICE
			   , C.CLASS_CATEGORY
			   , C.CLASS_REG_DATE
			   , C.CLASS_RUNTIME
			   , C.CLASS_PIC1
			   , C.CLASS_CONTENTS
			   , C.CLASS_STATUS
			   , C.CLASS_ID
			   , CR.CUR_ID
			   , CR.CUR_TITLE
			   , CR.CUR_VIDEO
			   , CR.CUR_RUNTIME
			   , (SELECT TRUNCATE(AVG(REVIEW_SCORE), 1)
					FROM REVIEW
				   WHERE C.CLASS_ID = #{class_id}
					) AS REVIEW_SCORE
			   , M.MEM_ID 		AS TEACHER_ID	
			   , CC.CODENAME AS CATENAME
			FROM CLASS C
			JOIN MEMBER M ON M.MEM_ID = C.MEM_ID
			JOIN CURRICULUM CR ON CR.CLASS_ID = C.CLASS_ID
			JOIN COMMONCODETYPE CT ON CT.NAME = C.CLASS_CATEGORY
			JOIN COMMONCODE CC ON CC.CODEID = CT.CODETYPE
			
		   WHERE C.CLASS_ID = #{class_id}
	</select>
	
	<select id="selectCourseTeacher" resultType="course">
		SELECT 
			    C.CLASS_TITLE
			  , M.MEM_NAME		AS MEM_ID
			  , (SELECT TRUNCATE(AVG(REVIEW_SCORE), 1)
			       FROM REVIEW
				  WHERE C.CLASS_ID = #{class_id}
				   ) AS REVIEW_SCORE
		  FROM CLASS C
		  JOIN MEMBER M 
		    ON C.MEM_ID = M.MEM_ID
		 WHERE C.MEM_ID = #{teacher_id}  
		   AND CLASS_ID != #{class_id}
	</select>
	
	<select id="selectReviewList" resultType="myreview" parameterType="int">
		SELECT M.MEM_NAME AS MEM_ID
			 , R.REVIEW_DATE
			 , R.REVIEW_SCORE
			 , R.REVIEW_CONTENT
		
		  FROM (SELECT distinct CLASS_ID FROM CLASS WHERE CLASS_ID = #{class_id}) C 
		  JOIN REVIEW R
		  JOIN MEMBER M ON M.MEM_ID = R.MEM_ID
		 WHERE R.CLASS_ID = #{class_id}
	</select>
	
	<select id="selectCourseSupportList" resultType="cSupport" parameterType="int">
		SELECT *
		  FROM CLASS_SUPPORT
 	 	 WHERE C_CLASS_ID = #{class_id}
 	  ORDER BY C_SUPPORT_DATE DESC
 	 	 LIMIT 
			   #{startRow}
			 , #{listLimit}
	</select>
	<insert id="insertCourseSupport">
		<selectKey keyProperty="c_support_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(C_SUPPORT_IDX),0)
			  FROM CLASS_SUPPORT
		</selectKey>
		INSERT
		  INTO CLASS_SUPPORT 
	    VALUES (
		       #{c_support_idx} +1
		     , now()
		     , #{c_support_category}
		     , #{mem_id} 
		     , #{c_support_subject} 
		     , #{c_support_content} 
		     , #{c_support_answer_date} 
		     , #{c_support_answer_subject} 
		     , #{c_support_answer_content} 
		     , #{c_support_file} 
		     , #{c_class_id}
		)   
	</insert>
	<select id="selectCSupportListCount"  resultType="int">
		SELECT COUNT(*)
		  FROM CLASS_SUPPORT
		 WHERE 1 = 1
		 <if test="class_id != 0">
		   AND C_CLASS_ID = ${class_id}
		 </if>
		  
	</select>
	
	
	<select id="selectCourseSupport" resultType="cSupport" parameterType="int">
		SELECT *
		  FROM CLASS_SUPPORT
 	 	 WHERE C_SUPPORT_IDX = #{c_support_idx}
	</select>
	<update id="updateCourseSupport">
		UPDATE CLASS_SUPPORT 
		   SET 
		       C_SUPPORT_CATEGORY = #{c_support_category}
		     , C_SUPPORT_SUBJECT = #{c_support_subject} 
		     , C_SUPPORT_CONTENT = #{c_support_content}
		     , C_SUPPORT_FILE = #{c_support_file} 
		 WHERE C_SUPPORT_IDX = #{c_support_idx}
	</update>
	<update id="deleteBoardFile">
	 	UPDATE CLASS_SUPPORT
		SET
			C_SUPPORT_FILE = CASE WHEN C_SUPPORT_FILE = #{c_support_file} THEN '' ELSE C_SUPPORT_FILE END 
		WHERE
			C_SUPPORT_IDX = #{c_support_idx}
	</update>
	<delete id="deleteCourseSupport">
		DELETE 
		  FROM CLASS_SUPPORT
		 WHERE C_SUPPORT_IDX = #{c_support_idx}
	</delete>
	<select id="selectMenuList" resultType="map">
		SELECT C.CODEID
			   , C.CODENAME AS MAIN_MENU
		       , T.CODETYPE_ID
		       , T.NAME AS SUB_MENU
		FROM COMMONCODE C
		JOIN COMMONCODETYPE T ON C.CODEID = T.CODETYPE
		WHERE C.CODETYPE = 'CATE'
	</select>
	
	
	<insert id="insertApplyForCourse">
		<selectKey keyProperty="cartitem_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(CARTITEM_IDX),0)
			  FROM CART
		</selectKey>
		INSERT INTO CART
		VALUES (
			   #{cartitem_idx} + 1
			 , #{class_id}
			 , #{id}
		)
	</insert>
</mapper>
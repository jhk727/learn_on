<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.learnon.mapper.MypageMapper">
	<select id="selectWishlist" resultType="wish">
		-- 관심목록 조회
		SELECT 
			 W.MEM_ID
			 , W.CLASS_ID
			 , C.CLASS_CATEGORY
			 , C.CLASS_TITLE
		     , C.CLASS_REG_DATE
		     , TRUNCATE(IFNULL(AVG(REVIEW_SCORE), 0), 1) AS REVIEW_SCORE
		     , M.MEM_NAME AS TEACHER_NAME
		  FROM WISHLIST W 
		  LEFT JOIN CLASS C ON C.CLASS_ID = W.CLASS_ID
		  LEFT JOIN MEMBER M ON M.MEM_ID = C.MEM_ID
		  LEFT JOIN REVIEW R ON R.CLASS_ID = C.CLASS_ID
		 WHERE W.MEM_ID = #{id}
		 GROUP BY W.MEM_ID
				  , W.CLASS_ID
		          , C.CLASS_CATEGORY
		          , C.CLASS_TITLE
		          , C.CLASS_REG_DATE
		          , M.MEM_NAME
		 <choose>
		 	<when test="filterType.equals('newest')">
				ORDER BY C.CLASS_REG_DATE DESC
		 	</when>
		 	<when test="filterType.equals('popularity')">
				ORDER BY REVIEW_SCORE DESC
		 	</when>
		 </choose>
	</select>
	<delete id="deleteWish">
		-- 관심목록 삭제
		DELETE FROM WISHLIST
		WHERE CLASS_ID = #{class_id};
	</delete>
	<select id="selectMyCourse" resultType="mycourse">
		-- 나의 강의실 목록 조회
		SELECT 
			  A.MEM_ID
		      , A.COURSE_STATUS
		      , IFNULL(A.STUDY_TIME, 0) AS STUDY_TIME
		      , C.CLASS_ID
		      , C.CLASS_CATEGORY
		      , C.CLASS_TITLE
		      , C.CLASS_RUNTIME
		      , (SELECT COUNT(CUR_ID)
		        FROM CURRICULUM
		        WHERE CLASS_ID = C.CLASS_ID) AS CURRICULUM_COUNT
		      , M.MEM_NAME AS TEACHER_NAME
		      , R.REVIEW_IDX
		      , R.REVIEW_CONTENT
		  FROM MYCOURSE A
		  LEFT JOIN CLASS C ON C.CLASS_ID = A.CLASS_ID
		  LEFT JOIN MEMBER M ON C.MEM_ID = M.MEM_ID
		  LEFT JOIN REVIEW R ON R.CLASS_ID = A.CLASS_ID
					   AND R.MEM_ID = A.MEM_ID
		WHERE A.MEM_ID = #{id}
		<choose>
			<when test="statusType == 'studying'">
			  AND A.COURSE_STATUS = 1
			</when>
			<when test="statusType == 'completed'">
			  AND A.COURSE_STATUS = 2
			</when>
		</choose>
		<choose>
		 	<when test="filterType == 'newest'">
				ORDER BY C.CLASS_REG_DATE DESC
		 	</when>
		 	<when test="filterType == 'title'">
				ORDER BY C.CLASS_TITLE
		 	</when>
		 </choose>
	</select>
	<insert id="insertReview">
		<selectKey keyProperty="review_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(REVIEW_IDX), 0)
			FROM REVIEW
		</selectKey>
		-- 수강평 등록
		INSERT 
		INTO REVIEW
		VALUES (
				#{review_idx} + 1 				-- 번호 자동증가
				, #{mem_id}
			    , #{review_content}
			    , NOW()
			    , #{class_id}
			    , #{review_score}
			    , null
		   		)
	</insert>
	<select id="selectCompletionRate" resultType="int">
		-- 수강률 계산
		SELECT 
			COALESCE(TRUNCATE((STUDY_TIME / CLASS_RUNTIME) * 100, 0), 0) AS COMPLETION_RATE
		  FROM MYCOURSE A
		  JOIN CLASS B
		    ON A.CLASS_ID = B.CLASS_ID
		 WHERE A.MEM_ID = #{id}
		   AND A.CLASS_ID = #{class_id};
	</select>
	<select id="selectIsReviewed" resultType="Boolean">
		-- 수강 후기 작성 여부
		SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END AS IS_REVIEWED
	      FROM REVIEW
	     WHERE MEM_ID = #{id}
	       AND CLASS_ID = #{class_id}
	</select>
	<select id="selectReview" resultType="myreview">
		-- 수강평 작성 목록 조회
		SELECT 
			   R.REVIEW_IDX
		       , R.MEM_ID
		       , M.MEM_NAME AS TEACHER_NAME
		       , R.REVIEW_CONTENT
		       , R.REVIEW_DATE
		       , R.CLASS_ID
		       , C.CLASS_TITLE
		       , R.REVIEW_SCORE
		       , R.REVIEW_ANSWER_CONTENT
		  FROM REVIEW R
		  JOIN CLASS C
		    ON C.CLASS_ID = R.CLASS_ID
		  JOIN MEMBER M
		    ON C.MEM_ID = M.MEM_ID
		 WHERE R.MEM_ID = #{mem_id}
	</select>
	<select id="selectReviewCount" resultType="int">
		-- 수강평 작성 개수 조회
		SELECT COUNT(*) AS TOTAL_COUNT
		FROM REVIEW
		WHERE MEM_ID = #{mem_id}
	</select>
	<select id="selectReviewDetail" resultType="myreview">
		-- 수강평 작성 조회
		SELECT 
			   R.REVIEW_IDX
		       , R.MEM_ID
		       , M.MEM_NAME AS TEACHER_NAME
		       , R.REVIEW_CONTENT
		       , R.REVIEW_DATE
		       , R.CLASS_ID
		       , C.CLASS_TITLE
		       , R.REVIEW_SCORE
		       , R.REVIEW_ANSWER_CONTENT
		  FROM REVIEW R
		  JOIN CLASS C
		    ON C.CLASS_ID = R.CLASS_ID
		  JOIN MEMBER M
		    ON C.MEM_ID = M.MEM_ID
		 WHERE R.MEM_ID = #{mem_id}
		   AND R.CLASS_ID = #{class_id}
		 ORDER BY R.REVIEW_IDX DESC
	</select>
	<update id="updateReview">
		-- 작성된 수강 후기 수정
		UPDATE REVIEW
		   SET
	    	   REVIEW_DATE = NOW()
		   <if test="review_content != null and review_content != ''">
			   , REVIEW_CONTENT = #{review_content}
		   </if>
		   <if test="review_score != null and review_score != 0">
	    	   , REVIEW_SCORE = #{review_score}
		   </if>
		 WHERE 
		 	   MEM_ID = #{mem_id}
		   AND CLASS_ID = #{class_id}
	</update>
	<delete id="deleteReview">
		-- 수강 후기 삭제
		DELETE 
		  FROM REVIEW
		 WHERE MEM_ID = #{mem_id}
		   AND CLASS_ID = #{class_id};
	</delete>
	<select id="selectCoupon" resultType="map">
		-- 쿠폰 목록 조회
		SELECT M.COUPON_ID
			   , M.ISSUE_DATE
		       , M.COUPON_STATUS
		       , C.COUPON_NAME
		       , C.COUPON_CODE
		       , C.DISCOUNT_PERCENT
		       , C.DISCOUNT_AMOUNT
		       , C.C_EXPIRY_DATE
		  FROM MYCOUPON M
		  JOIN COUPONINFO C
		    ON M.COUPON_ID = C.COUPON_ID
		WHERE M.MEM_ID = #{mem_id}
	</select>
	<select id="selectCouponCount" resultType="int">
		SELECT COUNT(*) AS COUPON_COUNT
		  FROM MYCOUPON
		 WHERE MEM_ID = #{mem_id}
		   AND COUPON_STATUS != 2
	</select>
</mapper>
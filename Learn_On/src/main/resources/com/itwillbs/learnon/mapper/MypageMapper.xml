<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.learnon.mapper.MypageMapper">
	<select id="selectWishlist" resultType="wish">
		-- 관심목록 조회
		SELECT 
			 W.MEM_ID
			 , W.CLASS_ID
			 , C.CLASS_CATEGORY
			 , C.CLASS_TITLE
			 , C.CLASS_PIC1 AS CLASS_PIC
		     , C.CLASS_REG_DATE
		     , TRUNCATE(IFNULL(AVG(REVIEW_SCORE), 0), 1) AS REVIEW_SCORE
		     , M.MEM_NAME AS TEACHER_NAME
		  FROM WISHLIST W 
		  LEFT JOIN CLASS C ON C.CLASS_ID = W.CLASS_ID
		  LEFT JOIN MEMBER M ON M.MEM_ID = C.MEM_ID
		  LEFT JOIN REVIEW R ON R.CLASS_ID = C.CLASS_ID
		 WHERE W.MEM_ID = #{id}
		 GROUP BY W.MEM_ID
				  , W.CLASS_ID
		          , C.CLASS_CATEGORY
		          , C.CLASS_TITLE
		          , C.CLASS_PIC1
		          , C.CLASS_REG_DATE
		          , M.MEM_NAME
		 <choose>
		 	<when test="filterType.equals('newest')">
				ORDER BY C.CLASS_REG_DATE DESC
		 	</when>
		 	<when test="filterType.equals('popularity')">
				ORDER BY REVIEW_SCORE DESC
		 	</when>
		 </choose>
	</select>
	<select id="selectWishlistForCategoryList" resultType="map">
		SELECT CLASS_ID
			   , WISHLIST_IDX
		FROM WISHLIST
		WHERE MEM_ID = #{id}
	</select>
	<insert id="insertWish">
		<selectKey keyProperty="wishlist_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(WISHLIST_IDX), 0)
			  FROM WISHLIST
		</selectKey>
		-- 관심목록 추가
		INSERT INTO WISHLIST
		VALUES (
			#{wishlist_idx} + 1
			, #{class_id}
			, #{mem_id}
		)
	</insert>
	<delete id="deleteWish">
		-- 관심목록 삭제
		DELETE FROM WISHLIST
		WHERE CLASS_ID = #{class_id};
	</delete>
	<select id="selectMyCourse" resultType="mycourse">
		-- 나의 강의실 목록 조회
		SELECT 
			A.MEM_ID
			, CASE 
				WHEN COALESCE(CAST((A.STUDY_TIME / C.CLASS_RUNTIME) * 100 AS SIGNED), 0) = 0 THEN 0
				WHEN COALESCE(CAST((A.STUDY_TIME / C.CLASS_RUNTIME) * 100 AS SIGNED), 0) = 100 THEN 2
				ELSE 1
			  END AS COURSE_STATUS
			, IFNULL(A.STUDY_TIME, 0) AS STUDY_TIME
			, C.CLASS_ID
			, C.CLASS_CATEGORY
			, C.CLASS_TITLE
			, C.CLASS_PIC1 AS CLASS_PIC
			, C.CLASS_RUNTIME
			, COUNT(CUR.CUR_ID) AS CURRICULUM_COUNT
			, M.MEM_NAME AS TEACHER_NAME
			, R.REVIEW_IDX
			, R.REVIEW_CONTENT
			, COALESCE(CAST((A.STUDY_TIME / C.CLASS_RUNTIME) * 100 AS SIGNED), 0) AS COMPLETION_RATE
			, CASE WHEN COUNT(R.REVIEW_IDX) > 0 THEN TRUE ELSE FALSE END AS IS_REVIEWED
		  FROM MYCOURSE A
		  LEFT JOIN CLASS C ON C.CLASS_ID = A.CLASS_ID
		  LEFT JOIN MEMBER M ON C.MEM_ID = M.MEM_ID
		  LEFT JOIN REVIEW R ON R.CLASS_ID = A.CLASS_ID AND R.MEM_ID = A.MEM_ID
		  LEFT JOIN CURRICULUM CUR ON CUR.CLASS_ID = C.CLASS_ID
		WHERE A.MEM_ID = #{id}
		<choose>
			<when test="statusType == 'studying'">
			  AND A.COURSE_STATUS = 1
			</when>
			<when test="statusType == 'completed'">
			  AND A.COURSE_STATUS = 2
			</when>
		</choose>
		GROUP BY 
			A.MEM_ID
			, A.COURSE_STATUS
			, A.STUDY_TIME
		    , C.CLASS_ID
			, C.CLASS_CATEGORY
		    , C.CLASS_REG_DATE
			, C.CLASS_TITLE
			, C.CLASS_PIC1
			, C.CLASS_RUNTIME
		    , M.MEM_NAME
		    , R.REVIEW_IDX
		    , R.REVIEW_CONTENT
		ORDER BY 1
		<choose>
		 	<when test="filterType == 'newest'">
				 , C.CLASS_REG_DATE DESC
		 	</when>
		 	<when test="filterType == 'title'">
				 , C.CLASS_TITLE
		 	</when>
		 </choose>
	</select>
	<insert id="insertReview">
		<selectKey keyProperty="review_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(REVIEW_IDX), 0)
			FROM REVIEW
		</selectKey>
		-- 수강평 등록
		INSERT 
		INTO REVIEW
		VALUES (
				#{review_idx} + 1 				-- 번호 자동증가
				, #{mem_id}
			    , #{review_content}
			    , NOW()
			    , #{class_id}
			    , #{review_score}
			    , null
		   		)
	</insert>
	<select id="selectReview" resultType="myreview">
		-- 수강평 작성 목록 조회
		SELECT 
			   R.REVIEW_IDX
		       , R.MEM_ID
		       , M.MEM_NAME AS TEACHER_NAME
		       , R.REVIEW_CONTENT
		       , R.REVIEW_DATE
		       , R.CLASS_ID
		       , C.CLASS_TITLE
		       , C.CLASS_PIC1 AS CLASS_PIC
		       , R.REVIEW_SCORE
		       , R.REVIEW_ANSWER_CONTENT
		  FROM REVIEW R
		  JOIN CLASS C
		    ON C.CLASS_ID = R.CLASS_ID
		  JOIN MEMBER M
		    ON C.MEM_ID = M.MEM_ID
		 WHERE R.MEM_ID = #{mem_id}
	</select>
	<select id="selectReviewCount" resultType="int">
		-- 수강평 작성 개수 조회
		SELECT COUNT(*) AS TOTAL_COUNT
		FROM REVIEW
		WHERE MEM_ID = #{mem_id}
	</select>
	<select id="selectReviewDetail" resultType="myreview">
		-- 수강평 작성 조회
		SELECT 
			   R.REVIEW_IDX
		       , R.MEM_ID
		       , M.MEM_NAME AS TEACHER_NAME
		       , R.REVIEW_CONTENT
		       , R.REVIEW_DATE
		       , R.CLASS_ID
		       , C.CLASS_TITLE
		       , C.CLASS_PIC1 AS CLASS_PIC
		       , R.REVIEW_SCORE
		       , R.REVIEW_ANSWER_CONTENT
		  FROM REVIEW R
		  JOIN CLASS C
		    ON C.CLASS_ID = R.CLASS_ID
		  JOIN MEMBER M
		    ON C.MEM_ID = M.MEM_ID
		 WHERE R.MEM_ID = #{mem_id}
		   AND R.CLASS_ID = #{class_id}
		 ORDER BY R.REVIEW_IDX DESC
	</select>
	<update id="updateReview">
		-- 작성된 수강 후기 수정
		UPDATE REVIEW
		   SET
	    	   REVIEW_DATE = NOW()
		   <if test="review_content != null and review_content != ''">
			   , REVIEW_CONTENT = #{review_content}
		   </if>
		   <if test="review_score != null and review_score != 0">
	    	   , REVIEW_SCORE = #{review_score}
		   </if>
		 WHERE 
		 	   MEM_ID = #{mem_id}
		   AND CLASS_ID = #{class_id}
	</update>
	<delete id="deleteReview">
		-- 수강 후기 삭제
		DELETE 
		  FROM REVIEW
		 WHERE MEM_ID = #{mem_id}
		   AND CLASS_ID = #{class_id};
	</delete>
	<select id="selectMyDashboard" resultType="myDashboard">
		-- 나의강의실 수강화면 조회
		SELECT 
				A.MEM_ID
				, IFNULL(A.STUDY_TIME, 0) AS STUDY_TIME
				, C.CLASS_ID
				, C.CLASS_CATEGORY
				, C.CLASS_TITLE
				, C.CLASS_PIC1 AS CLASS_PIC
				, C.CLASS_RUNTIME
				, COUNT(CUR.CUR_ID) AS CURRICULUM_COUNT
				, M.MEM_NAME AS TEACHER_NAME
		  FROM MYCOURSE A
		  LEFT JOIN CLASS C ON C.CLASS_ID = A.CLASS_ID
		  LEFT JOIN MEMBER M ON C.MEM_ID = M.MEM_ID
		  LEFT JOIN CURRICULUM CUR ON CUR.CLASS_ID = C.CLASS_ID
		WHERE A.MEM_ID = #{mem_id}
		  AND A.CLASS_ID = #{class_id}
		GROUP BY 
				A.MEM_ID
				, A.COURSE_STATUS
				, A.STUDY_TIME
				, C.CLASS_ID
				, C.CLASS_CATEGORY
				, C.CLASS_REG_DATE
				, C.CLASS_TITLE
				, C.CLASS_PIC1
				, C.CLASS_RUNTIME
				, M.MEM_NAME
	</select>
	<select id="selectMyCurList" resultType="myCurriculum">
		-- 커리큘럼과 시청기록 조회
		SELECT HIS.MEM_ID
			   , CUR.CLASS_ID
			   , CUR.CUR_ID
		       , CUR.CUR_TITLE
		       , CUR.CUR_VIDEO
		       , CUR.CUR_RUNTIME
		       , HIS.COMPLETED_STATUS
		FROM CURRICULUM CUR
		JOIN CURHISTORY HIS ON CUR.CUR_ID = HIS.CUR_ID
		WHERE HIS.MEM_ID = #{mem_id}
		  AND CUR.CLASS_ID = #{class_id}
	</select>
	<update id="updateCurStatus">
		-- 강의 시청 시 상태 변경
		UPDATE CURHISTORY
		SET COMPLETED_STATUS = 1
		WHERE CUR_ID = #{cur_id}
	</update>
	<update id="updateStudyTime">
		-- 학습시간 업데이트
		UPDATE MYCOURSE
		SET STUDY_TIME = (SELECT COALESCE(SUM(CUR.CUR_RUNTIME), 0)
							FROM CURRICULUM CUR
							JOIN CURHISTORY HIS ON CUR.CUR_ID =  HIS.CUR_ID
						   WHERE HIS.COMPLETED_STATUS = 1
		                     AND HIS.MEM_ID = MYCOURSE.MEM_ID
		                     AND CUR.CLASS_ID = MYCOURSE.CLASS_ID
		                 )
		WHERE MEM_ID = #{mem_id}
		  AND CLASS_ID = #{class_id}
	</update>
	<update id="updateCourseStatus">
		-- 학습시간에 따른 상태 변경(학습중, 완강)
		UPDATE MYCOURSE A
		  JOIN CLASS C ON A.CLASS_ID = C.CLASS_ID
		   SET A.COURSE_STATUS = 
							CASE 
								WHEN (A.STUDY_TIME / C.CLASS_RUNTIME) * 100 = 0 THEN 0
								WHEN (A.STUDY_TIME / C.CLASS_RUNTIME) * 100 >= 100 THEN 2
								ELSE 1
						    END
		WHERE C.CLASS_RUNTIME > 0
		  AND A.MEM_ID = #{mem_id}
	</update>
	<select id="selectCoupon" resultType="map">
		-- 쿠폰 목록 조회
		SELECT M.COUPON_ID
			   , M.ISSUE_DATE
		       , M.COUPON_STATUS
		       , C.COUPON_NAME
		       , C.COUPON_CODE
		       , C.DISCOUNT_TYPE
		       , C.DISCOUNT_PERCENT
		       , C.DISCOUNT_AMOUNT
		       , C.C_EXPIRY_DATE
		  FROM MYCOUPON M
		  JOIN COUPONINFO C
		    ON M.COUPON_ID = C.COUPON_ID
		WHERE M.MEM_ID = #{mem_id}
	</select>
	<select id="selectCouponCount" resultType="int">
		-- 보유한 쿠폰수 조회
		SELECT COUNT(*) AS COUPON_COUNT
		  FROM MYCOUPON
		 WHERE MEM_ID = #{mem_id}
		   AND COUPON_STATUS != 2
	</select>
	<insert id="insertSupport">
		<selectKey keyProperty="support_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(SUPPORT_IDX), 0)
			  FROM SUPPORT
		</selectKey>
		-- 1:1 문의글 작성
		INSERT 
		  INTO SUPPORT
	    VALUES (
				#{support_idx} + 1
				, now()
				, #{support_category}
				, #{mem_id}
				, #{support_subject}
				, #{support_content}
				, null
				, null
				, null
				, #{support_file1}
			   )
	</insert>
	<select id="selectSupportListCount" resultType="int">
		-- 1:1문의 전체 게시글수
		SELECT COUNT(*)
		  FROM SUPPORT
		 WHERE MEM_ID = #{id}
	</select>
	<select id="selectSupportList" resultType="mysupport">
		-- 1:1문의 전체 목록
		SELECT S.SUPPORT_IDX
				, S.SUPPORT_DATE
				, S.SUPPORT_CATEGORY
			    , M.MEM_NAME
				, S.MEM_ID
				, S.SUPPORT_SUBJECT
				, S.SUPPORT_CONTENT
				, S.SUPPORT_FILE AS SUPPORT_FILE1
				, S.SUPPORT_ANSWER_DATE
				, S.SUPPORT_ANSWER_SUBJECT
				, S.SUPPORT_ANSWER_CONTENT
		  FROM SUPPORT S
		  JOIN MEMBER M 
		    ON M.MEM_ID = S.MEM_ID
		 WHERE S.MEM_ID = #{id}
		 ORDER BY
		 	S.SUPPORT_IDX DESC
		 LIMIT
		 	#{startRow}
		 	, #{listLimit}
	</select> 
	<select id="selectSupportDetail" resultType="mysupport">
		-- 1:1문의 상세내용
		SELECT SUPPORT_IDX
			   , SUPPORT_DATE
			   , SUPPORT_CATEGORY
			   , MEM_ID
			   , SUPPORT_SUBJECT
			   , SUPPORT_CONTENT
			   , SUPPORT_FILE AS SUPPORT_FILE1
			   , SUPPORT_ANSWER_DATE
			   , SUPPORT_ANSWER_SUBJECT
			   , SUPPORT_ANSWER_CONTENT
		  FROM SUPPORT
		 WHERE SUPPORT_IDX = #{support_idx}
	</select>
	<update id="updateSupport">
		-- 1:1문의 수정
		UPDATE SUPPORT
		SET SUPPORT_SUBJECT = #{support_subject}
			, SUPPORT_CONTENT = #{support_content}
			, SUPPORT_CATEGORY = #{support_category}
			<if test="!support_file1.equals('')">
			, SUPPORT_FILE = #{support_file1}
			</if>
		WHERE
			SUPPORT_IDX = #{support_idx}
	</update>
	<delete id="deleteSupport">
		-- 1:1 문의 삭제
		DELETE FROM SUPPORT
		 WHERE SUPPORT_IDX = #{support_idx}
	</delete>
	<update id="deleteSupportFile">
		-- 1:1 문의 수정 - 첨부파일 삭제
		UPDATE SUPPORT
		SET SUPPORT_FILE = CASE WHEN SUPPORT_FILE = #{file} THEN '' ELSE SUPPORT_FILE END
		WHERE
			SUPPORT_IDX = #{support_idx}
	</update>
	<select id="selectAttendance" resultType="attendance">
		-- 출석체크 현황
		SELECT *
		FROM ATTENDANCE
		WHERE MEM_ID = #{id}
	</select>
	<select id="selectSupportListToAdm" resultType="mysupport">
		-- 관리자 1:1문의 전체 목록 조회
		SELECT S.SUPPORT_IDX
				, S.SUPPORT_DATE
				, S.SUPPORT_CATEGORY
			    , M.MEM_NAME
				, S.MEM_ID
				, S.SUPPORT_SUBJECT
				, S.SUPPORT_CONTENT
				, S.SUPPORT_ANSWER_DATE
				, S.SUPPORT_ANSWER_SUBJECT
				, S.SUPPORT_ANSWER_CONTENT
				, S.SUPPORT_FILE AS SUPPORT_FILE1
		  FROM SUPPORT S
		  JOIN MEMBER M 
		    ON M.MEM_ID = S.MEM_ID
		 ORDER BY
		 	S.SUPPORT_IDX DESC
		 LIMIT
		 	#{startRow}
		 	, #{listLimit}
	</select>
	<update id="updateSupportAnswer">
		-- 관리자 1:1문의 답변 작성 및 수정
		UPDATE SUPPORT
		   SET SUPPORT_ANSWER_DATE = NOW()
			   , SUPPORT_ANSWER_SUBJECT = #{support_answer_subject}
		       , SUPPORT_ANSWER_CONTENT = #{support_answer_content}
		  WHERE SUPPORT_IDX = #{support_idx}
	</update>
</mapper>
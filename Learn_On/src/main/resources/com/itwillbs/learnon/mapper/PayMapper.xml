<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.learnon.mapper.PayMapper">
    <!-- 주문회원 정보 조회 -->
    <select id="selectMember" resultType="member">
		SELECT *
		FROM MEMBER
		WHERE mem_id = #{sId}
	</select>
	
	<!-- resultMap을 사용한 MyBatis 자동 매핑 : 다음번엔 map으로 담아가기!-->
	<resultMap id="CartToOrderMap" type="order">
		<result property="cartitem_idx" column="CARTITEM_IDX"/>
	   	<result property="class_id" column="CLASS_ID"/>
	    <result property="mem_id" column="MEM_ID"/>
	    <result property="class_title" column="CLASS_TITLE"/>
	    <result property="teacher_name" column="MEM_NAME"/>
	    <result property="class_price" column="CLASS_PRICE"/>
	    <result property="class_pic1" column="CLASS_PIC1"/>
	</resultMap>
	<!-- 선택된 장바구니 상품 조회 -->
    <select id="selectedCart" parameterType="list" resultType="order" resultMap="CartToOrderMap">
        SELECT
	        ca.CARTITEM_IDX, 
	        cl.CLASS_ID, 
	        cl.CLASS_TITLE, 
	        m.MEM_ID, 
	        m.MEM_NAME, 
	        cl.CLASS_PRICE, 
	        cl.CLASS_PIC1
	    FROM CLASS cl
	    LEFT JOIN MEMBER m ON cl.MEM_ID = m.MEM_ID
	    JOIN CART ca ON cl.CLASS_ID = ca.CLASS_ID
	    WHERE ca.CARTITEM_IDX IN
	    <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
<!-- 	   foreach [arg0, collection, list]에러시.. collection="list" 이걸로 해야됨!!!!!!!!!!!!!! 이거때메 하루종일 삽질했네...-->
	        #{item}
	    </foreach>
    </select>
    
	
	<!-- 결제 정보 저장 -->
	<insert id="insertPayInfo">
		INSERT INTO PAY_INFO
		( 	MERCHANT_UID
			, CLASS_NAME
			, MEM_ID
			, MEM_NAME
			, PRICE
			, DISCOUNT_AMOUNT
			, PAY_METHOD
			, PAY_STATUS
			, PAY_DATE
			, IMP_UID
			, CARD_NAME
			, CARD_NUM
			, BANK_NAME
			, BANK_NUM
			, RECEIPT_URL
		)
		VALUES 
		(	#{merchant_uid}
			, #{class_name}
			, #{mem_id}
			, #{mem_name}
			, #{price}
			, #{discount_amount}
			, #{pay_method}
			, CASE
				WHEN #{pay_status} = 'paid' THEN 1		-- 결제완료
				WHEN #{pay_status} = 'failed' THEN 2	-- 결제취소
				WHEN #{pay_status} = 'ready' THEN 3		-- 결제대기(무통장입금) 
				ELSE NULL
			  END
			, CURRENT_TIMESTAMP()
			, #{imp_uid}
			, #{card_name}
			, #{card_num}
			, #{bank_name}
			, #{bank_num}
			, #{receipt_url}
		)
	</insert>
	
	<!-- 주문 정보 저장 -->
	<insert id="insertOrderInfo" >
		<selectKey keyProperty="order_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(order_idx), 0) + 1
			FROM ORDER_INFO
		</selectKey>
		INSERT INTO ORDER_INFO
		( 
			ORDER_IDX
			, MERCHANT_UID
			, MEM_ID
			, CLASS_ID
			, CLASS_PRICE
			, COUPON_ID
			, PAY_PRICE
		)
		VALUES
		(
			#{order_idx}
			, #{merchant_uid}
			, #{mem_id}
			, #{class_id}
			, #{class_price}
			, #{coupon_id}
			, #{price}
		)
	</insert>
    
	<!-- 결제 완료시 사용한 쿠폰 상태 업데이트 -->
	<update id="updateCoupon">
		UPDATE MYCOUPON
		SET COUPON_ISUSED = 2
		WHERE MEM_ID = #{mem_id}
		AND COUPON_ID = #{coupon_id}
	</update>
	
	<!-- 결제 완료시 나의 클래스에 인서트 -->
	<insert id="insertMycourse">
		<selectKey keyProperty="course_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(course_idx), 0) + 1
			FROM MYCOURSE
		</selectKey>
		INSERT INTO MYCOURSE
		(
			COURSE_IDX
			, MEM_ID
			, CLASS_ID
			, COURSE_STATUS
			, ORDER_IDX
			, CLASS_MARK
		)
		VALUES
		(
			#{course_idx}
			, #{mem_id}
			, #{class_id}
			, 0
			, #{order_idx}
			, 0
		)	
	</insert>
	
	<!-- 결제 완료시 커리큘럼 시청기록 인서트(초기값) -->
	<insert id="insertCurHistory">
		<selectKey keyProperty="history_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(history_idx), 0)
			FROM CURHISTORY
		</selectKey>
		INSERT INTO CURHISTORY
		( 
			 HISTORY_IDX
		    , MEM_ID
		    , CUR_ID
		    , COMPLETED_STATUS	
		)
		SELECT
			#{history_idx} + ROW_NUMBER() OVER(ORDER BY CUR_ID)
			, #{mem_id}
		    , CUR_ID
			, 0 -- 시청여부 (0 : 시청전 / 1: 시청완료) 최종에는 default값 0이라 누락해도됨
		FROM CURRICULUM
		WHERE CLASS_ID = #{class_id}
	</insert>
	
	<!-- 결제 정보 조회 -->
	<select id="selectPayInfo" resultType="pay">
		 SELECT 	
		 	  MERCHANT_UID
			, CLASS_NAME
	        , PRICE+DISCOUNT_AMOUNT AS totalAmount
	        , DISCOUNT_AMOUNT
	        , PRICE
	        , PAY_METHOD
			, CARD_NAME
	        , CARD_NUM
	        , BANK_NAME
	        , BANK_NUM
	        , RECEIPT_URL
		FROM PAY_INFO
		WHERE MERCHANT_UID = #{merchant_uid}
	</select>
	
	
	<!-- impUid에 해당하는 회원ID 조회 -->
	<select id="selectMemId">
		SELECT MEM_ID
		FROM PAY_INFO
		WHERE IMP_UID = #{imp_uid}
	</select>
	
	<!-- 결제 취소 시 주문상태 변경 -->
	<update id="updatePayStatus">
		UPDATE PAY_INFO
		SET PAY_STATUS = 2
		WHERE 1=1
		AND MEM_ID = #{memId}  
		AND	IMP_UID = #{imp_uid}
	</update>
	
	<!-- 결제 취소 시 쿠폰 미사용으로 변경 -->
	<!-- COUPON_ISUSED : 쿠폰사용여부(1:미사용,2:사용완료) -->
	<update id="updateCouponUsed">
		UPDATE MYCOUPON
		SET COUPON_ISUSED = 1
		WHERE 1=1
		AND MEM_ID = #{memId} 
		AND COUPON_ID = (
			SELECT DISTINCT O.COUPON_ID
			FROM PAY_INFO P
			JOIN ORDER_INFO O ON P.MERCHANT_UID = O.MERCHANT_UID
			WHERE P.IMP_UID = #{imp_uid}
		)
	</update>
	
	<!-- 나의클래스 & 커리큘럼시청기록 데이터 삭제하기 -->
	<delete id="deleteMycourse">
		DELETE FROM MYCOURSE
		WHERE MEM_ID = #{memId}
		AND ORDER_IDX = (SELECT ORDER_IDX
						 FROM PAY_INFO
						 WHERE IMP_UID = #{imp_uid})
	</delete>
	<delete id="deleteCurhistory">
		DELETE FROM CURHISTORY
		WHERE MEM_ID = #{memId}
		AND CUR_ID IN ( SELECT CUR_ID 
						FROM CURRICULUM
						WHERE CLASS_ID IN (	SELECT O.CLASS_ID
											FROM ORDER_INFO O JOIN PAY_INFO P
											ON O.MERCHANT_UID = P.MERCHANT_UID
											WHERE P.IMP_UID = #{imp_uid}
										  )
						)
	</delete>
</mapper>